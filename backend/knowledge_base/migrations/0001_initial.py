# Generated by Django 5.2.3 on 2025-08-11 08:29

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('chunk_size', models.PositiveIntegerField(default=1024, help_text='Number of documents to be processed in each chunk', verbose_name='Chunk size')),
                ('chunk_overlap', models.PositiveIntegerField(default=204, help_text='Number of overlapping documents in each chunk', verbose_name='Chunk overlap')),
                ('chunk_seperator', models.JSONField(default=['\n\n', '\n', ' ', ''], help_text='Separator used to split documents into chunks', verbose_name='Chunk separator')),
                ('summarizer_context', models.TextField(blank=True, help_text='Context to be provided to the summarizer', null=True, verbose_name='Summarizer Context')),
                ('summarizer_type', models.CharField(choices=[('standard', 'Standard'), ('context_aware', 'Context-Aware')], default='standard', help_text='The type of summarizer to use for document summarization', max_length=20, verbose_name='Summarizer Type')),
                ('summarizer_temperature', models.FloatField(blank=True, default=0.7, help_text='Temperature to be provided to the summarizer', null=True, verbose_name='Summarizer Temperature')),
                ('status', models.CharField(choices=[('active', 'Active'), ('archived', 'Archived'), ('deleted', 'Deleted')], default='active', max_length=20, verbose_name='Status')),
                ('knowledge_base_each_document_cost', models.PositiveIntegerField(default=1, help_text='The cost of each document in the knowledge base', verbose_name='Knowledge Base Each Document Cost')),
            ],
            options={
                'verbose_name': 'Knowledge Base',
                'verbose_name_plural': 'Knowledge Bases',
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBaseChunk',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('index', models.PositiveIntegerField(default=0, verbose_name='Index')),
                ('content', models.TextField(verbose_name='Content')),
                ('keywords', models.JSONField(blank=True, default=list, null=True, verbose_name='Keywords')),
            ],
            options={
                'verbose_name': 'Chunk',
                'verbose_name_plural': 'Chunks',
                'ordering': ['document', 'index'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBaseDocument',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('content', models.TextField(verbose_name='Content')),
                ('source_type', models.CharField(choices=[('manual', 'Manual'), ('file', 'File'), ('crawl', 'Crawl')], default='manual', max_length=20, verbose_name='Source Type')),
                ('source', models.CharField(blank=True, max_length=1256, null=True, verbose_name='Source')),
                ('error', models.TextField(blank=True, null=True, verbose_name='Error')),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='Metadata')),
                ('status', models.CharField(choices=[('new', 'New'), ('reindexing', 'Reindexing'), ('crawling', 'Crawling'), ('processing', 'Processing'), ('ready', 'Ready'), ('failed', 'Failed')], default='new', max_length=20, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
            },
        ),
    ]
