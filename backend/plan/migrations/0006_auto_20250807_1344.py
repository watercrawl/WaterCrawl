# Generated by Django 5.2.3 on 2025-08-07 13:44

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('plan', '0005_usagehistory_content_id_usagehistory_content_type_and_more'),
    ]

    operations = [
        migrations.RunSQL(
            # Forward migration: populate content_type and content_id based on existing foreign keys
            sql="""
            -- Update records with crawl_request
            UPDATE plan_usagehistory 
            SET content_type_id = (
                SELECT id FROM django_content_type 
                WHERE app_label = 'core' AND model = 'crawlrequest'
            ),
            content_id = crawl_request_id
            WHERE crawl_request_id IS NOT NULL;

            -- Update records with search_request
            UPDATE plan_usagehistory 
            SET content_type_id = (
                SELECT id FROM django_content_type 
                WHERE app_label = 'core' AND model = 'searchrequest'
            ),
            content_id = search_request_id
            WHERE search_request_id IS NOT NULL;

            -- Update records with sitemap_request
            UPDATE plan_usagehistory 
            SET content_type_id = (
                SELECT id FROM django_content_type 
                WHERE app_label = 'core' AND model = 'sitemaprequest'
            ),
            content_id = sitemap_request_id
            WHERE sitemap_request_id IS NOT NULL;
            """,
            # Reverse migration: restore original foreign key relationships
            reverse_sql="""
            -- Restore crawl_request_id from content_type and content_id
            UPDATE plan_usagehistory 
            SET crawl_request_id = CASE 
                WHEN EXISTS (SELECT 1 FROM core_crawlrequest WHERE uuid = content_id) 
                THEN content_id 
                ELSE NULL 
            END
            WHERE content_type_id = (
                SELECT id FROM django_content_type 
                WHERE app_label = 'core' AND model = 'crawlrequest'
            );

            -- Restore search_request_id from content_type and content_id
            UPDATE plan_usagehistory 
            SET search_request_id = CASE 
                WHEN EXISTS (SELECT 1 FROM core_searchrequest WHERE uuid = content_id) 
                THEN content_id 
                ELSE NULL 
            END
            WHERE content_type_id = (
                SELECT id FROM django_content_type 
                WHERE app_label = 'core' AND model = 'searchrequest'
            );

            -- Restore sitemap_request_id from content_type and content_id
            UPDATE plan_usagehistory 
            SET sitemap_request_id = CASE 
                WHEN EXISTS (SELECT 1 FROM core_sitemaprequest WHERE uuid = content_id) 
                THEN content_id 
                ELSE NULL 
            END
            WHERE content_type_id = (
                SELECT id FROM django_content_type 
                WHERE app_label = 'core' AND model = 'sitemaprequest'
            );

            -- Clear content_type and content_id fields
            UPDATE plan_usagehistory 
            SET content_type_id = NULL, content_id = NULL
            WHERE content_type_id IS NOT NULL OR content_id IS NOT NULL;
            """
        ),
    ]
