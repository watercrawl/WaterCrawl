name: Manual Version Bump and Release PR

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 0.6.0)'
        required: true
        type: string

jobs:
  version-bump:
    name: Bump version and open PR
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Prepare version variables
        id: vars
        run: |
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "VERSION_V=v${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=release/v${{ github.event.inputs.version }}" >> $GITHUB_ENV

      # Check if branch already exists
      - name: Check if branch exists
        id: check-branch
        run: |
          if git ls-remote --heads origin release/v${{ env.VERSION }} | grep -q "release/v${{ env.VERSION }}"; then
            echo "Branch already exists"
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Branch does not exist"
            echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi

      # Delete branch if it exists and we're starting fresh
      - name: Delete branch if it exists
        if: env.BRANCH_EXISTS == 'true'
        run: |
          git push origin --delete release/v${{ env.VERSION }} || true
          echo "Deleted existing branch release/v${{ env.VERSION }}"

      - name: Create release branch
        run: |
          git checkout -b release/v${{ env.VERSION }}
          echo "Created branch release/v${{ env.VERSION }}"

      - name: Bump version in all files
        id: bump-version
        run: |
          echo "Bumping version to ${{ env.VERSION }} in files..."
          
          # Function to update version patterns in a file with specific line context
          update_version() {
            local file=$1
            local context=$2  # Line context to identify the right version to update
            local pattern=$3
            local replacement=$4
            local description=$5
            
            if [[ ! -f "$file" ]]; then
              echo "Warning: $file not found"
              return 1
            fi
            
            # Find lines with the specific context and update only those versions
            if grep -q "$context" "$file"; then
              # Using awk to search for context and only update versions in matching lines
              awk -v context="$context" -v pattern="$pattern" -v replacement="$replacement" '
              $0 ~ context {
                # Only replace in lines with the specified context
                gsub(pattern, replacement);
                changes = 1;
              }
              { print }
              ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
              
              echo "Updated $description in $file (context: $context)"
            else
              echo "Context '$context' not found in $file"
              return 1
            fi
            return 0
          }
          
          # Track if any files were updated
          UPDATED=0
          
          # DEPLOYMENT.md - specifically look for WaterCrawl version references
          if [[ -f "DEPLOYMENT.md" ]]; then
            # Look for specific line contexts before updating
            update_version "DEPLOYMENT.md" "watercrawl" "v[0-9]+\\.[0-9]+\\.[0-9]+" "v${{ env.VERSION }}" "WaterCrawl version with v prefix" && UPDATED=1
            update_version "DEPLOYMENT.md" "VERSION" "[0-9]+\\.[0-9]+\\.[0-9]+" "${{ env.VERSION }}" "WaterCrawl version in VERSION context" && UPDATED=1
          else
            echo "Warning: DEPLOYMENT.md not found"
          fi
          
          # pyproject.toml - look for the project version line specifically
          if [[ -f "backend/pyproject.toml" ]]; then
            update_version "backend/pyproject.toml" "version =" "\"[0-9]+\\.[0-9]+\\.[0-9]+\"" "\"${{ env.VERSION }}\"" "WaterCrawl project version" && UPDATED=1
          else
            echo "Warning: backend/pyproject.toml not found"
          fi
          
          # SettingsProvider.tsx - update the compatible backend version
          if [[ -f "frontend/src/contexts/SettingsProvider.tsx" ]]; then
            update_version "frontend/src/contexts/SettingsProvider.tsx" "COMPATIBLE_BACKEND_VERSION" "'[0-9]+\\.[0-9]+\\.[0-9]+'" "'${{ env.VERSION }}'" "Compatible backend version" && UPDATED=1
          else
            echo "Warning: frontend/src/contexts/SettingsProvider.tsx not found"
          fi
          
          # .env.example - look specifically for VERSION variables
          if [[ -f "docker/.env.example" ]]; then
            update_version "docker/.env.example" "^VERSION=" "=[0-9]+\\.[0-9]+\\.[0-9]+" "=${{ env.VERSION }}" "Main VERSION variable" && UPDATED=1
            update_version "docker/.env.example" "^VERSION=" "=v[0-9]+\\.[0-9]+\\.[0-9]+" "=v${{ env.VERSION }}" "Main VERSION variable with v prefix" && UPDATED=1
          else
            echo "Warning: docker/.env.example not found"
          fi
          
          # docker-compose.yml - specifically update image versions
          if [[ -f "docker/docker-compose.yml" ]]; then
            update_version "docker/docker-compose.yml" "watercrawl" ":[0-9]+\\.[0-9]+\\.[0-9]+" ":${{ env.VERSION }}" "WaterCrawl image version" && UPDATED=1
            update_version "docker/docker-compose.yml" "VERSION:" "-[0-9]+\\.[0-9]+\\.[0-9]+" "-${{ env.VERSION }}" "VERSION default variable" && UPDATED=1
            update_version "docker/docker-compose.yml" "VERSION:" "-v[0-9]+\\.[0-9]+\\.[0-9]+" "-v${{ env.VERSION }}" "VERSION default with v prefix" && UPDATED=1
          else
            echo "Warning: docker/docker-compose.yml not found"
          fi
          
          # backend/Dockerfile - update base image version
          if [[ -f "docker/backend/Dockerfile" ]]; then
            update_version "docker/backend/Dockerfile" "FROM watercrawl/watercrawl" "v[0-9]+\\.[0-9]+\\.[0-9]+" "v${{ env.VERSION }}" "base image version in backend Dockerfile" && UPDATED=1
          else
            echo "Warning: docker/backend/Dockerfile not found"
          fi
          
          # Show changes
          echo "Showing changes made:"
          git diff
          
          # Check if any files were changed
          if [[ $UPDATED -eq 0 ]]; then
            echo "ERROR: No files were updated successfully!"
            echo "VERSION_BUMPED=false" >> $GITHUB_ENV
            exit 1
          else
            echo "Files were successfully updated"
            echo "VERSION_BUMPED=true" >> $GITHUB_ENV
          fi

      - name: Commit changes
        if: env.VERSION_BUMPED == 'true'
        id: commit
        run: |
          git add -A
          git commit -m "chore(release): bump version to v${{ env.VERSION }}"
          echo "Changes committed to the following files:"
          echo "- DEPLOYMENT.md"
          echo "- backend/pyproject.toml"
          echo "- frontend/src/contexts/SettingsProvider.tsx"
          echo "- docker/.env.example"
          echo "- docker/docker-compose.yml"
          echo "- docker/backend/Dockerfile"
          echo "Changes committed"

      - name: Push branch
        if: steps.commit.outcome == 'success'
        id: push
        run: |
          echo "Pushing branch to remote..."
          git push -f origin release/v${{ env.VERSION }}
          echo "PUSH_STATUS=success" >> $GITHUB_ENV

      # Manual PR creation using the GitHub CLI as a fallback
      - name: Install GitHub CLI
        if: steps.push.outcome == 'success'
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Create PR using GitHub CLI
        if: steps.push.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating pull request..."
          # Set base URL for creating PR manually as fallback
          MANUAL_PR_URL="${{ github.server_url }}/${{ github.repository }}/compare/main...release/v${{ env.VERSION }}?expand=1&title=Release%20v${{ env.VERSION }}"
          
          # Try to create the PR using GitHub CLI
          if ! PR_URL=$(gh pr create --title "Release v${{ env.VERSION }}" --body "Bump version to v${{ env.VERSION }} and update all related files for release.

          - DEPLOYMENT.md
          - backend/pyproject.toml
          - frontend/src/contexts/SettingsProvider.tsx
          - docker/.env.example
          - docker/docker-compose.yml
          - docker/backend/Dockerfile" --base main --head release/v${{ env.VERSION }}); then
            echo "❌ Failed to create PR automatically."
            echo "🔗 Please create PR manually: $MANUAL_PR_URL"
            exit 0  # Don't fail the workflow
          fi
          
          echo "✅ Pull request created: $PR_URL"
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV

      # Use the Peter Evans action as a fallback - disabled since we're using GitHub CLI
      # - name: Create Pull Request (Action)
      #   if: steps.push.outcome == 'success' && !env.PR_URL
      #   uses: peter-evans/create-pull-request@v5
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     commit-message: "chore(release): bump version to v${{ env.VERSION }}"
      #     branch: release/v${{ env.VERSION }}
      #     delete-branch: false
      #     base: main
      #     title: "Release v${{ env.VERSION }}"
      #     body: |
      #       Bump version to v${{ env.VERSION }} and update all related files for release.
      #       
      #       - DEPLOYMENT.md
      #       - backend/pyproject.toml
      #       - frontend/src/contexts/SettingsProvider.tsx
      #       - docker/.env.example
      #       - docker/docker-compose.yml
      #       - docker/backend/Dockerfile
